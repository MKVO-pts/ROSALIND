//Awnsers to the Rosalind bioinformatics problems using RUST
/*
 - eache problem is in its own file 
 - each file must have one function that solves the problem
 - the file and function naming must follow the problem ID and question 
*/ 

//the awnsers bellow are from https://github.com/rosalind/rosalind/blob/master/src/main.rs

use std::fs::File;
use std::io::prelude::*;


mod problems {
    pub mod HAMM;
}

fn read_file(filename: String) -> String {
    let mut file = File::open(filename).expect("File not found");
    let mut contents = String::new();
    file.read_to_string(&mut contents)
        .expect("something went wrong reading the file");
    contents
}


fn main() {
    const ID_PROBLEM: &str = "prtm";
    let data: String = String::from(read_file(format!("rosalind_{}.txt", ID_PROBLEM)));

    let seq1:String = String::from("ACCTACCTTATCCATCATGCGGGAGTTCCAAGAAATTACGTTCTGGACGTGCGAAAGGGTAGGCGGAGGGAGCTTCAAATGACGGGATTTATGACCCCTTCGTAGGTACTATCATGGCTTAATCGATTCCAGCCCTCACTATTCGGAACATATGGCAACCATTCTGCAAAGAGAGTCGCGCCGACGCTCGTCTATGTTTCTCGTTATGCTTAAGCAAGTGGCGAAGTCGGGATCTCCACCCAAGCCGGCGACTTGTTCTTATGAAAACTGCGACATTCACACGTTTAGATGGACGGACTGTGATAGAAGGCCTCTAGGGCCACCGGAAGGCGGGGGGACCAGACGATATCCAGGCAGAATTTACGCACGATACAAATGATTGTGGCGCGTTCGCCATGGGTACTTGCGCTCTAAGCGTCTGCACGTAAGATCTTTTGAGCGGCCTATAAGCTCACACAAACCAACAACCGGACCTTCACTCCGTCAGTGGGTTCGTTGAGTTACCCGCACACGAATGCCAGAGCCTATCCACGTAGTACTAGCACGCAGTTGGTAGCCGTAAGGGCAGGTTAGAAACTCCGACTTATTGTGGCGGTGTCTCCCCATCCCTGTTATGCCTGCGCTTCTCCGAATAATCCTGTGGGATTCCACCCACGTTTGCCACCCTCGGGTAAGTCTCCCAGACGCCGTCCAGAACTTGAGATAAGTGGAGCTATCTAACTCAAAGCTGAACCGCTACTTCGAAGAGCATTGGCTAAAACTGCCCCCTAATTTATGCAGATTGATGTATGACTGGTTGGTGGCCCGGACAGGTTGGATGTCGCTTACCCAATAGGTTGGTATCCGTAGCCTGTATATAAGAGTCCATCCAGCCCTGCGGCGCCATCTATATGGGCGCACTTCCTTTGAGGTTAACGAAGAGGGCGACTTTCTAATAGCTTCATCTCAAAATGTTTAGGCTTGCTACGGATGGCCGGGGAAA");
    let seq2:String = String::from("TTGCTCAGTAGTAATCCCGGTGTATAACCCAGAACGTAGGACCGGCCCGTACAAAATGATATCTACGCGCACTTGCCGGAGACTCGTTTTGGGACTACTTCGGACGACCTGGAGTTGGCTCAGTAGGTTCTCTAGCGTCGAACTCGAAGGTGAGGCAGCCGTTGTCCGGTTAGGGTGGTTCGGTTCGGCGTCTAGGTTTTGCGATTAGGGTCCCTGAGGGCCCAAATCGACGTTTCCTACCAAATCTATCAGTGAGTCTGTTGTACGGAGCCCTAGCCACGATTTTAGTGTCGGGTATTATAGAACAGAGCTCCTTCGGCCATCGCAGCGCGGCGACATTAGTCGATCCACGGGTTATACGTTAGGAATTTACAATACGTTTTAACTCGTGCTCATTGAGTAATGGAGTTGAAAGCCGAGTTCCGCGAAATGTGTTAAAGGGCCTACTAACGCACTAGACTAGACACCTGGGGAATAAGCCCGTCTATGGGGTCTTTCAGTTACCCGTACGCTTTGACCATTACAGAGACGGGATCTACTCAAACGCTTAAAGCCCCCGCTAGGGCTTCCAAGAAGCCCCACGGGATTGTGGCCTTGGCACCCCTCTTCAAGATCGTGGGCGATCCTTCGCATAAGCCGTTGGGGTCGCACCCCATGATAGATCCCTTGACTCTAACGATCTGCCCCCGTGACGTATGTTGCAAGAGAAGCTCCGGCTCCATGCTATCCGGTACGCATGACCTTCGAGACTCCCCTACCACCGGACCCAAAATTGAGGATATCTATGTATTCCGGGATCTGCCTTCTGAGTGGCGTTATTTTGCTTTCCTAAAGCGCTGGCGTACGCAGCGTATATATGAGCGTCTGGCCCGCCCATCAGACCCGTCCAGGTTGCCGAACACGCCCGCCTGACAAAGATAAACTCGATCTTTGATCAGTCTCCTCTACACATGACCAAGGTTTTTCTTGATGTACGTCTGAA");

    //Soluction
    let solution = problems::HAMM::counting_point_mutations(seq1,seq2);
    print!("{}", solution);

}


